//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.296.
// 
#pragma warning disable 1591

namespace RSM.Integration.Track.Proxy {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ACS2TrackWebSvcSoap", Namespace="http://tracksoftware.net/")]
    public partial class ACS2TrackWebSvc : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback AddPersonOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddPersonByEmpIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddCompanyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInOutIndicatorOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddEventByExtEmpRefSimpleOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddEventByExtEmpRefByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddEventByExtEmpRefOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddEventByExtEmpRef2OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCompanyCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTrackEmployeeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEmployeeIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddReaderDeviceOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddReaderDeviceByDescriptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddAccessExpirationReasonOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddOrUpdateDeviceControlUnitsOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddEventOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddEventByEmpIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReaderIDByDescriptionOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ACS2TrackWebSvc() {
            this.Url = global::RSM.Integration.Track.Properties.Settings.Default.RSM_Integration_Track_Track_ACS2TrackWebSvc;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event AddPersonCompletedEventHandler AddPersonCompleted;
        
        /// <remarks/>
        public event AddPersonByEmpIDCompletedEventHandler AddPersonByEmpIDCompleted;
        
        /// <remarks/>
        public event AddCompanyCompletedEventHandler AddCompanyCompleted;
        
        /// <remarks/>
        public event GetInOutIndicatorCompletedEventHandler GetInOutIndicatorCompleted;
        
        /// <remarks/>
        public event AddEventByExtEmpRefSimpleCompletedEventHandler AddEventByExtEmpRefSimpleCompleted;
        
        /// <remarks/>
        public event AddEventByExtEmpRefByLocationCompletedEventHandler AddEventByExtEmpRefByLocationCompleted;
        
        /// <remarks/>
        public event AddEventByExtEmpRefCompletedEventHandler AddEventByExtEmpRefCompleted;
        
        /// <remarks/>
        public event AddEventByExtEmpRef2CompletedEventHandler AddEventByExtEmpRef2Completed;
        
        /// <remarks/>
        public event GetCompanyCodeCompletedEventHandler GetCompanyCodeCompleted;
        
        /// <remarks/>
        public event GetTrackEmployeeCompletedEventHandler GetTrackEmployeeCompleted;
        
        /// <remarks/>
        public event GetEmployeeIDCompletedEventHandler GetEmployeeIDCompleted;
        
        /// <remarks/>
        public event AddReaderDeviceCompletedEventHandler AddReaderDeviceCompleted;
        
        /// <remarks/>
        public event AddReaderDeviceByDescriptionCompletedEventHandler AddReaderDeviceByDescriptionCompleted;
        
        /// <remarks/>
        public event AddAccessExpirationReasonCompletedEventHandler AddAccessExpirationReasonCompleted;
        
        /// <remarks/>
        public event AddOrUpdateDeviceControlUnitsCompletedEventHandler AddOrUpdateDeviceControlUnitsCompleted;
        
        /// <remarks/>
        public event AddEventCompletedEventHandler AddEventCompleted;
        
        /// <remarks/>
        public event AddEventByEmpIDCompletedEventHandler AddEventByEmpIDCompleted;
        
        /// <remarks/>
        public event GetReaderIDByDescriptionCompletedEventHandler GetReaderIDByDescriptionCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tracksoftware.net/AddPerson", RequestNamespace="http://tracksoftware.net/", ResponseNamespace="http://tracksoftware.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddPerson(string sDataSource, string sLastName, string sFirstName, string sMiddleName, string sExtEmpRef, string sExtCmpRef, string sLocationID, string sSSN, string sExtCardID, string sPayGroupName, ref string sErrorStr) {
            object[] results = this.Invoke("AddPerson", new object[] {
                        sDataSource,
                        sLastName,
                        sFirstName,
                        sMiddleName,
                        sExtEmpRef,
                        sExtCmpRef,
                        sLocationID,
                        sSSN,
                        sExtCardID,
                        sPayGroupName,
                        sErrorStr});
            sErrorStr = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddPersonAsync(string sDataSource, string sLastName, string sFirstName, string sMiddleName, string sExtEmpRef, string sExtCmpRef, string sLocationID, string sSSN, string sExtCardID, string sPayGroupName, string sErrorStr) {
            this.AddPersonAsync(sDataSource, sLastName, sFirstName, sMiddleName, sExtEmpRef, sExtCmpRef, sLocationID, sSSN, sExtCardID, sPayGroupName, sErrorStr, null);
        }
        
        /// <remarks/>
        public void AddPersonAsync(string sDataSource, string sLastName, string sFirstName, string sMiddleName, string sExtEmpRef, string sExtCmpRef, string sLocationID, string sSSN, string sExtCardID, string sPayGroupName, string sErrorStr, object userState) {
            if ((this.AddPersonOperationCompleted == null)) {
                this.AddPersonOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddPersonOperationCompleted);
            }
            this.InvokeAsync("AddPerson", new object[] {
                        sDataSource,
                        sLastName,
                        sFirstName,
                        sMiddleName,
                        sExtEmpRef,
                        sExtCmpRef,
                        sLocationID,
                        sSSN,
                        sExtCardID,
                        sPayGroupName,
                        sErrorStr}, this.AddPersonOperationCompleted, userState);
        }
        
        private void OnAddPersonOperationCompleted(object arg) {
            if ((this.AddPersonCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddPersonCompleted(this, new AddPersonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tracksoftware.net/AddPersonByEmpID", RequestNamespace="http://tracksoftware.net/", ResponseNamespace="http://tracksoftware.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddPersonByEmpID(string sDataSource, string sLastName, string sFirstName, string sMiddleName, string sEmpID, string sLocationID, string sCmpCode, string sSSN, ref string sErrorStr) {
            object[] results = this.Invoke("AddPersonByEmpID", new object[] {
                        sDataSource,
                        sLastName,
                        sFirstName,
                        sMiddleName,
                        sEmpID,
                        sLocationID,
                        sCmpCode,
                        sSSN,
                        sErrorStr});
            sErrorStr = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddPersonByEmpIDAsync(string sDataSource, string sLastName, string sFirstName, string sMiddleName, string sEmpID, string sLocationID, string sCmpCode, string sSSN, string sErrorStr) {
            this.AddPersonByEmpIDAsync(sDataSource, sLastName, sFirstName, sMiddleName, sEmpID, sLocationID, sCmpCode, sSSN, sErrorStr, null);
        }
        
        /// <remarks/>
        public void AddPersonByEmpIDAsync(string sDataSource, string sLastName, string sFirstName, string sMiddleName, string sEmpID, string sLocationID, string sCmpCode, string sSSN, string sErrorStr, object userState) {
            if ((this.AddPersonByEmpIDOperationCompleted == null)) {
                this.AddPersonByEmpIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddPersonByEmpIDOperationCompleted);
            }
            this.InvokeAsync("AddPersonByEmpID", new object[] {
                        sDataSource,
                        sLastName,
                        sFirstName,
                        sMiddleName,
                        sEmpID,
                        sLocationID,
                        sCmpCode,
                        sSSN,
                        sErrorStr}, this.AddPersonByEmpIDOperationCompleted, userState);
        }
        
        private void OnAddPersonByEmpIDOperationCompleted(object arg) {
            if ((this.AddPersonByEmpIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddPersonByEmpIDCompleted(this, new AddPersonByEmpIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tracksoftware.net/AddCompany", RequestNamespace="http://tracksoftware.net/", ResponseNamespace="http://tracksoftware.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddCompany(string sDataSource, string sCompanyName, string sExtCompanyCode, string sLocationID, ref string sErrorStr) {
            object[] results = this.Invoke("AddCompany", new object[] {
                        sDataSource,
                        sCompanyName,
                        sExtCompanyCode,
                        sLocationID,
                        sErrorStr});
            sErrorStr = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddCompanyAsync(string sDataSource, string sCompanyName, string sExtCompanyCode, string sLocationID, string sErrorStr) {
            this.AddCompanyAsync(sDataSource, sCompanyName, sExtCompanyCode, sLocationID, sErrorStr, null);
        }
        
        /// <remarks/>
        public void AddCompanyAsync(string sDataSource, string sCompanyName, string sExtCompanyCode, string sLocationID, string sErrorStr, object userState) {
            if ((this.AddCompanyOperationCompleted == null)) {
                this.AddCompanyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddCompanyOperationCompleted);
            }
            this.InvokeAsync("AddCompany", new object[] {
                        sDataSource,
                        sCompanyName,
                        sExtCompanyCode,
                        sLocationID,
                        sErrorStr}, this.AddCompanyOperationCompleted, userState);
        }
        
        private void OnAddCompanyOperationCompleted(object arg) {
            if ((this.AddCompanyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddCompanyCompleted(this, new AddCompanyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tracksoftware.net/GetInOutIndicator", RequestNamespace="http://tracksoftware.net/", ResponseNamespace="http://tracksoftware.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetInOutIndicator(string sDataSource, int iSysID, int iDeviceID, int iLocationID, ref int iRetVal, ref string sErrorStr) {
            object[] results = this.Invoke("GetInOutIndicator", new object[] {
                        sDataSource,
                        iSysID,
                        iDeviceID,
                        iLocationID,
                        iRetVal,
                        sErrorStr});
            iRetVal = ((int)(results[1]));
            sErrorStr = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetInOutIndicatorAsync(string sDataSource, int iSysID, int iDeviceID, int iLocationID, int iRetVal, string sErrorStr) {
            this.GetInOutIndicatorAsync(sDataSource, iSysID, iDeviceID, iLocationID, iRetVal, sErrorStr, null);
        }
        
        /// <remarks/>
        public void GetInOutIndicatorAsync(string sDataSource, int iSysID, int iDeviceID, int iLocationID, int iRetVal, string sErrorStr, object userState) {
            if ((this.GetInOutIndicatorOperationCompleted == null)) {
                this.GetInOutIndicatorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInOutIndicatorOperationCompleted);
            }
            this.InvokeAsync("GetInOutIndicator", new object[] {
                        sDataSource,
                        iSysID,
                        iDeviceID,
                        iLocationID,
                        iRetVal,
                        sErrorStr}, this.GetInOutIndicatorOperationCompleted, userState);
        }
        
        private void OnGetInOutIndicatorOperationCompleted(object arg) {
            if ((this.GetInOutIndicatorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInOutIndicatorCompleted(this, new GetInOutIndicatorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tracksoftware.net/AddEventByExtEmpRefSimple", RequestNamespace="http://tracksoftware.net/", ResponseNamespace="http://tracksoftware.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddEventByExtEmpRefSimple(string sDataSource, string sEventDateTime, string sExtEmpRef, int iInOutNeut, ref string sErrorStr) {
            object[] results = this.Invoke("AddEventByExtEmpRefSimple", new object[] {
                        sDataSource,
                        sEventDateTime,
                        sExtEmpRef,
                        iInOutNeut,
                        sErrorStr});
            sErrorStr = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddEventByExtEmpRefSimpleAsync(string sDataSource, string sEventDateTime, string sExtEmpRef, int iInOutNeut, string sErrorStr) {
            this.AddEventByExtEmpRefSimpleAsync(sDataSource, sEventDateTime, sExtEmpRef, iInOutNeut, sErrorStr, null);
        }
        
        /// <remarks/>
        public void AddEventByExtEmpRefSimpleAsync(string sDataSource, string sEventDateTime, string sExtEmpRef, int iInOutNeut, string sErrorStr, object userState) {
            if ((this.AddEventByExtEmpRefSimpleOperationCompleted == null)) {
                this.AddEventByExtEmpRefSimpleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddEventByExtEmpRefSimpleOperationCompleted);
            }
            this.InvokeAsync("AddEventByExtEmpRefSimple", new object[] {
                        sDataSource,
                        sEventDateTime,
                        sExtEmpRef,
                        iInOutNeut,
                        sErrorStr}, this.AddEventByExtEmpRefSimpleOperationCompleted, userState);
        }
        
        private void OnAddEventByExtEmpRefSimpleOperationCompleted(object arg) {
            if ((this.AddEventByExtEmpRefSimpleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddEventByExtEmpRefSimpleCompleted(this, new AddEventByExtEmpRefSimpleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tracksoftware.net/AddEventByExtEmpRefByLocation", RequestNamespace="http://tracksoftware.net/", ResponseNamespace="http://tracksoftware.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddEventByExtEmpRefByLocation(string sDataSource, string sEventDateTime, string sExtEmpRef, int iSysID, int iEvntLocID, int iDeviceID, int iEvntCode, ref string sErrorStr, string sLocationID, string sCardID) {
            object[] results = this.Invoke("AddEventByExtEmpRefByLocation", new object[] {
                        sDataSource,
                        sEventDateTime,
                        sExtEmpRef,
                        iSysID,
                        iEvntLocID,
                        iDeviceID,
                        iEvntCode,
                        sErrorStr,
                        sLocationID,
                        sCardID});
            sErrorStr = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddEventByExtEmpRefByLocationAsync(string sDataSource, string sEventDateTime, string sExtEmpRef, int iSysID, int iEvntLocID, int iDeviceID, int iEvntCode, string sErrorStr, string sLocationID, string sCardID) {
            this.AddEventByExtEmpRefByLocationAsync(sDataSource, sEventDateTime, sExtEmpRef, iSysID, iEvntLocID, iDeviceID, iEvntCode, sErrorStr, sLocationID, sCardID, null);
        }
        
        /// <remarks/>
        public void AddEventByExtEmpRefByLocationAsync(string sDataSource, string sEventDateTime, string sExtEmpRef, int iSysID, int iEvntLocID, int iDeviceID, int iEvntCode, string sErrorStr, string sLocationID, string sCardID, object userState) {
            if ((this.AddEventByExtEmpRefByLocationOperationCompleted == null)) {
                this.AddEventByExtEmpRefByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddEventByExtEmpRefByLocationOperationCompleted);
            }
            this.InvokeAsync("AddEventByExtEmpRefByLocation", new object[] {
                        sDataSource,
                        sEventDateTime,
                        sExtEmpRef,
                        iSysID,
                        iEvntLocID,
                        iDeviceID,
                        iEvntCode,
                        sErrorStr,
                        sLocationID,
                        sCardID}, this.AddEventByExtEmpRefByLocationOperationCompleted, userState);
        }
        
        private void OnAddEventByExtEmpRefByLocationOperationCompleted(object arg) {
            if ((this.AddEventByExtEmpRefByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddEventByExtEmpRefByLocationCompleted(this, new AddEventByExtEmpRefByLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tracksoftware.net/AddEventByExtEmpRef", RequestNamespace="http://tracksoftware.net/", ResponseNamespace="http://tracksoftware.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddEventByExtEmpRef(string sDataSource, string sEventDateTime, string sExtEmpRef, int iSysID, int iEvntLocID, int iDeviceID, int iEvntCode, ref string sErrorStr) {
            object[] results = this.Invoke("AddEventByExtEmpRef", new object[] {
                        sDataSource,
                        sEventDateTime,
                        sExtEmpRef,
                        iSysID,
                        iEvntLocID,
                        iDeviceID,
                        iEvntCode,
                        sErrorStr});
            sErrorStr = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddEventByExtEmpRefAsync(string sDataSource, string sEventDateTime, string sExtEmpRef, int iSysID, int iEvntLocID, int iDeviceID, int iEvntCode, string sErrorStr) {
            this.AddEventByExtEmpRefAsync(sDataSource, sEventDateTime, sExtEmpRef, iSysID, iEvntLocID, iDeviceID, iEvntCode, sErrorStr, null);
        }
        
        /// <remarks/>
        public void AddEventByExtEmpRefAsync(string sDataSource, string sEventDateTime, string sExtEmpRef, int iSysID, int iEvntLocID, int iDeviceID, int iEvntCode, string sErrorStr, object userState) {
            if ((this.AddEventByExtEmpRefOperationCompleted == null)) {
                this.AddEventByExtEmpRefOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddEventByExtEmpRefOperationCompleted);
            }
            this.InvokeAsync("AddEventByExtEmpRef", new object[] {
                        sDataSource,
                        sEventDateTime,
                        sExtEmpRef,
                        iSysID,
                        iEvntLocID,
                        iDeviceID,
                        iEvntCode,
                        sErrorStr}, this.AddEventByExtEmpRefOperationCompleted, userState);
        }
        
        private void OnAddEventByExtEmpRefOperationCompleted(object arg) {
            if ((this.AddEventByExtEmpRefCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddEventByExtEmpRefCompleted(this, new AddEventByExtEmpRefCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tracksoftware.net/AddEventByExtEmpRef2", RequestNamespace="http://tracksoftware.net/", ResponseNamespace="http://tracksoftware.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddEventByExtEmpRef2(string sDataSource, string sEventDateTime, string sExtEmpRef, int iSysID, int iEvntLocID, int iDeviceID, string sDeviceName, int iInOutNeut, ref string sErrorStr) {
            object[] results = this.Invoke("AddEventByExtEmpRef2", new object[] {
                        sDataSource,
                        sEventDateTime,
                        sExtEmpRef,
                        iSysID,
                        iEvntLocID,
                        iDeviceID,
                        sDeviceName,
                        iInOutNeut,
                        sErrorStr});
            sErrorStr = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddEventByExtEmpRef2Async(string sDataSource, string sEventDateTime, string sExtEmpRef, int iSysID, int iEvntLocID, int iDeviceID, string sDeviceName, int iInOutNeut, string sErrorStr) {
            this.AddEventByExtEmpRef2Async(sDataSource, sEventDateTime, sExtEmpRef, iSysID, iEvntLocID, iDeviceID, sDeviceName, iInOutNeut, sErrorStr, null);
        }
        
        /// <remarks/>
        public void AddEventByExtEmpRef2Async(string sDataSource, string sEventDateTime, string sExtEmpRef, int iSysID, int iEvntLocID, int iDeviceID, string sDeviceName, int iInOutNeut, string sErrorStr, object userState) {
            if ((this.AddEventByExtEmpRef2OperationCompleted == null)) {
                this.AddEventByExtEmpRef2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddEventByExtEmpRef2OperationCompleted);
            }
            this.InvokeAsync("AddEventByExtEmpRef2", new object[] {
                        sDataSource,
                        sEventDateTime,
                        sExtEmpRef,
                        iSysID,
                        iEvntLocID,
                        iDeviceID,
                        sDeviceName,
                        iInOutNeut,
                        sErrorStr}, this.AddEventByExtEmpRef2OperationCompleted, userState);
        }
        
        private void OnAddEventByExtEmpRef2OperationCompleted(object arg) {
            if ((this.AddEventByExtEmpRef2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddEventByExtEmpRef2Completed(this, new AddEventByExtEmpRef2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tracksoftware.net/GetCompanyCode", RequestNamespace="http://tracksoftware.net/", ResponseNamespace="http://tracksoftware.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetCompanyCode(string sDataSource, string sExtCmpRef, string sLocationID, ref string sCompanyCode, ref string sErrorStr) {
            object[] results = this.Invoke("GetCompanyCode", new object[] {
                        sDataSource,
                        sExtCmpRef,
                        sLocationID,
                        sCompanyCode,
                        sErrorStr});
            sCompanyCode = ((string)(results[1]));
            sErrorStr = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetCompanyCodeAsync(string sDataSource, string sExtCmpRef, string sLocationID, string sCompanyCode, string sErrorStr) {
            this.GetCompanyCodeAsync(sDataSource, sExtCmpRef, sLocationID, sCompanyCode, sErrorStr, null);
        }
        
        /// <remarks/>
        public void GetCompanyCodeAsync(string sDataSource, string sExtCmpRef, string sLocationID, string sCompanyCode, string sErrorStr, object userState) {
            if ((this.GetCompanyCodeOperationCompleted == null)) {
                this.GetCompanyCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCompanyCodeOperationCompleted);
            }
            this.InvokeAsync("GetCompanyCode", new object[] {
                        sDataSource,
                        sExtCmpRef,
                        sLocationID,
                        sCompanyCode,
                        sErrorStr}, this.GetCompanyCodeOperationCompleted, userState);
        }
        
        private void OnGetCompanyCodeOperationCompleted(object arg) {
            if ((this.GetCompanyCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCompanyCodeCompleted(this, new GetCompanyCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tracksoftware.net/GetTrackEmployee", RequestNamespace="http://tracksoftware.net/", ResponseNamespace="http://tracksoftware.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetTrackEmployee(string sDataSource, string sExtCmpRef, string sLocationID, string sExtEmpRef, ref System.Data.DataSet dsTrackPerson, ref string sErrorStr) {
            object[] results = this.Invoke("GetTrackEmployee", new object[] {
                        sDataSource,
                        sExtCmpRef,
                        sLocationID,
                        sExtEmpRef,
                        dsTrackPerson,
                        sErrorStr});
            dsTrackPerson = ((System.Data.DataSet)(results[1]));
            sErrorStr = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetTrackEmployeeAsync(string sDataSource, string sExtCmpRef, string sLocationID, string sExtEmpRef, System.Data.DataSet dsTrackPerson, string sErrorStr) {
            this.GetTrackEmployeeAsync(sDataSource, sExtCmpRef, sLocationID, sExtEmpRef, dsTrackPerson, sErrorStr, null);
        }
        
        /// <remarks/>
        public void GetTrackEmployeeAsync(string sDataSource, string sExtCmpRef, string sLocationID, string sExtEmpRef, System.Data.DataSet dsTrackPerson, string sErrorStr, object userState) {
            if ((this.GetTrackEmployeeOperationCompleted == null)) {
                this.GetTrackEmployeeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTrackEmployeeOperationCompleted);
            }
            this.InvokeAsync("GetTrackEmployee", new object[] {
                        sDataSource,
                        sExtCmpRef,
                        sLocationID,
                        sExtEmpRef,
                        dsTrackPerson,
                        sErrorStr}, this.GetTrackEmployeeOperationCompleted, userState);
        }
        
        private void OnGetTrackEmployeeOperationCompleted(object arg) {
            if ((this.GetTrackEmployeeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTrackEmployeeCompleted(this, new GetTrackEmployeeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tracksoftware.net/GetEmployeeID", RequestNamespace="http://tracksoftware.net/", ResponseNamespace="http://tracksoftware.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetEmployeeID(string sDataSource, string sExtEmpRef, string sLocationID, ref string sEmpID, ref string sErrorStr) {
            object[] results = this.Invoke("GetEmployeeID", new object[] {
                        sDataSource,
                        sExtEmpRef,
                        sLocationID,
                        sEmpID,
                        sErrorStr});
            sEmpID = ((string)(results[1]));
            sErrorStr = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetEmployeeIDAsync(string sDataSource, string sExtEmpRef, string sLocationID, string sEmpID, string sErrorStr) {
            this.GetEmployeeIDAsync(sDataSource, sExtEmpRef, sLocationID, sEmpID, sErrorStr, null);
        }
        
        /// <remarks/>
        public void GetEmployeeIDAsync(string sDataSource, string sExtEmpRef, string sLocationID, string sEmpID, string sErrorStr, object userState) {
            if ((this.GetEmployeeIDOperationCompleted == null)) {
                this.GetEmployeeIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEmployeeIDOperationCompleted);
            }
            this.InvokeAsync("GetEmployeeID", new object[] {
                        sDataSource,
                        sExtEmpRef,
                        sLocationID,
                        sEmpID,
                        sErrorStr}, this.GetEmployeeIDOperationCompleted, userState);
        }
        
        private void OnGetEmployeeIDOperationCompleted(object arg) {
            if ((this.GetEmployeeIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEmployeeIDCompleted(this, new GetEmployeeIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tracksoftware.net/AddReaderDevice", RequestNamespace="http://tracksoftware.net/", ResponseNamespace="http://tracksoftware.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddReaderDevice(string sDataSource, string sDescription, int iSysID, int iLocationID, int iDeviceID, int iInOutNeut, ref string sErrorStr) {
            object[] results = this.Invoke("AddReaderDevice", new object[] {
                        sDataSource,
                        sDescription,
                        iSysID,
                        iLocationID,
                        iDeviceID,
                        iInOutNeut,
                        sErrorStr});
            sErrorStr = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddReaderDeviceAsync(string sDataSource, string sDescription, int iSysID, int iLocationID, int iDeviceID, int iInOutNeut, string sErrorStr) {
            this.AddReaderDeviceAsync(sDataSource, sDescription, iSysID, iLocationID, iDeviceID, iInOutNeut, sErrorStr, null);
        }
        
        /// <remarks/>
        public void AddReaderDeviceAsync(string sDataSource, string sDescription, int iSysID, int iLocationID, int iDeviceID, int iInOutNeut, string sErrorStr, object userState) {
            if ((this.AddReaderDeviceOperationCompleted == null)) {
                this.AddReaderDeviceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddReaderDeviceOperationCompleted);
            }
            this.InvokeAsync("AddReaderDevice", new object[] {
                        sDataSource,
                        sDescription,
                        iSysID,
                        iLocationID,
                        iDeviceID,
                        iInOutNeut,
                        sErrorStr}, this.AddReaderDeviceOperationCompleted, userState);
        }
        
        private void OnAddReaderDeviceOperationCompleted(object arg) {
            if ((this.AddReaderDeviceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddReaderDeviceCompleted(this, new AddReaderDeviceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tracksoftware.net/AddReaderDeviceByDescription", RequestNamespace="http://tracksoftware.net/", ResponseNamespace="http://tracksoftware.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddReaderDeviceByDescription(string sDataSource, string sDescription, int iSysID, int iLocationID, int iInOutNeut, ref string sErrorStr) {
            object[] results = this.Invoke("AddReaderDeviceByDescription", new object[] {
                        sDataSource,
                        sDescription,
                        iSysID,
                        iLocationID,
                        iInOutNeut,
                        sErrorStr});
            sErrorStr = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddReaderDeviceByDescriptionAsync(string sDataSource, string sDescription, int iSysID, int iLocationID, int iInOutNeut, string sErrorStr) {
            this.AddReaderDeviceByDescriptionAsync(sDataSource, sDescription, iSysID, iLocationID, iInOutNeut, sErrorStr, null);
        }
        
        /// <remarks/>
        public void AddReaderDeviceByDescriptionAsync(string sDataSource, string sDescription, int iSysID, int iLocationID, int iInOutNeut, string sErrorStr, object userState) {
            if ((this.AddReaderDeviceByDescriptionOperationCompleted == null)) {
                this.AddReaderDeviceByDescriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddReaderDeviceByDescriptionOperationCompleted);
            }
            this.InvokeAsync("AddReaderDeviceByDescription", new object[] {
                        sDataSource,
                        sDescription,
                        iSysID,
                        iLocationID,
                        iInOutNeut,
                        sErrorStr}, this.AddReaderDeviceByDescriptionOperationCompleted, userState);
        }
        
        private void OnAddReaderDeviceByDescriptionOperationCompleted(object arg) {
            if ((this.AddReaderDeviceByDescriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddReaderDeviceByDescriptionCompleted(this, new AddReaderDeviceByDescriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tracksoftware.net/AddAccessExpirationReason", RequestNamespace="http://tracksoftware.net/", ResponseNamespace="http://tracksoftware.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddAccessExpirationReason(string sDataSource, string sReason, ref string sErrorStr) {
            object[] results = this.Invoke("AddAccessExpirationReason", new object[] {
                        sDataSource,
                        sReason,
                        sErrorStr});
            sErrorStr = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddAccessExpirationReasonAsync(string sDataSource, string sReason, string sErrorStr) {
            this.AddAccessExpirationReasonAsync(sDataSource, sReason, sErrorStr, null);
        }
        
        /// <remarks/>
        public void AddAccessExpirationReasonAsync(string sDataSource, string sReason, string sErrorStr, object userState) {
            if ((this.AddAccessExpirationReasonOperationCompleted == null)) {
                this.AddAccessExpirationReasonOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddAccessExpirationReasonOperationCompleted);
            }
            this.InvokeAsync("AddAccessExpirationReason", new object[] {
                        sDataSource,
                        sReason,
                        sErrorStr}, this.AddAccessExpirationReasonOperationCompleted, userState);
        }
        
        private void OnAddAccessExpirationReasonOperationCompleted(object arg) {
            if ((this.AddAccessExpirationReasonCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddAccessExpirationReasonCompleted(this, new AddAccessExpirationReasonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tracksoftware.net/AddOrUpdateDeviceControlUnits", RequestNamespace="http://tracksoftware.net/", ResponseNamespace="http://tracksoftware.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddOrUpdateDeviceControlUnits(string sDataSource, int iID, string sName, int iNumDevices, string sNetworkAddr, int iType, string sCapabilities, int iSysID, ref string sErrorStr) {
            object[] results = this.Invoke("AddOrUpdateDeviceControlUnits", new object[] {
                        sDataSource,
                        iID,
                        sName,
                        iNumDevices,
                        sNetworkAddr,
                        iType,
                        sCapabilities,
                        iSysID,
                        sErrorStr});
            sErrorStr = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddOrUpdateDeviceControlUnitsAsync(string sDataSource, int iID, string sName, int iNumDevices, string sNetworkAddr, int iType, string sCapabilities, int iSysID, string sErrorStr) {
            this.AddOrUpdateDeviceControlUnitsAsync(sDataSource, iID, sName, iNumDevices, sNetworkAddr, iType, sCapabilities, iSysID, sErrorStr, null);
        }
        
        /// <remarks/>
        public void AddOrUpdateDeviceControlUnitsAsync(string sDataSource, int iID, string sName, int iNumDevices, string sNetworkAddr, int iType, string sCapabilities, int iSysID, string sErrorStr, object userState) {
            if ((this.AddOrUpdateDeviceControlUnitsOperationCompleted == null)) {
                this.AddOrUpdateDeviceControlUnitsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddOrUpdateDeviceControlUnitsOperationCompleted);
            }
            this.InvokeAsync("AddOrUpdateDeviceControlUnits", new object[] {
                        sDataSource,
                        iID,
                        sName,
                        iNumDevices,
                        sNetworkAddr,
                        iType,
                        sCapabilities,
                        iSysID,
                        sErrorStr}, this.AddOrUpdateDeviceControlUnitsOperationCompleted, userState);
        }
        
        private void OnAddOrUpdateDeviceControlUnitsOperationCompleted(object arg) {
            if ((this.AddOrUpdateDeviceControlUnitsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddOrUpdateDeviceControlUnitsCompleted(this, new AddOrUpdateDeviceControlUnitsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tracksoftware.net/AddEvent", RequestNamespace="http://tracksoftware.net/", ResponseNamespace="http://tracksoftware.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddEvent(string sDataSource, string sEventDateTime, string sCardID, int iSysID, int iLocID, int iDeviceID, int iEvntCode, ref string sErrorStr) {
            object[] results = this.Invoke("AddEvent", new object[] {
                        sDataSource,
                        sEventDateTime,
                        sCardID,
                        iSysID,
                        iLocID,
                        iDeviceID,
                        iEvntCode,
                        sErrorStr});
            sErrorStr = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddEventAsync(string sDataSource, string sEventDateTime, string sCardID, int iSysID, int iLocID, int iDeviceID, int iEvntCode, string sErrorStr) {
            this.AddEventAsync(sDataSource, sEventDateTime, sCardID, iSysID, iLocID, iDeviceID, iEvntCode, sErrorStr, null);
        }
        
        /// <remarks/>
        public void AddEventAsync(string sDataSource, string sEventDateTime, string sCardID, int iSysID, int iLocID, int iDeviceID, int iEvntCode, string sErrorStr, object userState) {
            if ((this.AddEventOperationCompleted == null)) {
                this.AddEventOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddEventOperationCompleted);
            }
            this.InvokeAsync("AddEvent", new object[] {
                        sDataSource,
                        sEventDateTime,
                        sCardID,
                        iSysID,
                        iLocID,
                        iDeviceID,
                        iEvntCode,
                        sErrorStr}, this.AddEventOperationCompleted, userState);
        }
        
        private void OnAddEventOperationCompleted(object arg) {
            if ((this.AddEventCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddEventCompleted(this, new AddEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tracksoftware.net/AddEventByEmpID", RequestNamespace="http://tracksoftware.net/", ResponseNamespace="http://tracksoftware.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddEventByEmpID(string sDataSource, string sEventDateTime, string sCardID, int iSysID, int iLocID, int iDeviceID, int iEvntCode, string sLocationID, ref string sErrorStr) {
            object[] results = this.Invoke("AddEventByEmpID", new object[] {
                        sDataSource,
                        sEventDateTime,
                        sCardID,
                        iSysID,
                        iLocID,
                        iDeviceID,
                        iEvntCode,
                        sLocationID,
                        sErrorStr});
            sErrorStr = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddEventByEmpIDAsync(string sDataSource, string sEventDateTime, string sCardID, int iSysID, int iLocID, int iDeviceID, int iEvntCode, string sLocationID, string sErrorStr) {
            this.AddEventByEmpIDAsync(sDataSource, sEventDateTime, sCardID, iSysID, iLocID, iDeviceID, iEvntCode, sLocationID, sErrorStr, null);
        }
        
        /// <remarks/>
        public void AddEventByEmpIDAsync(string sDataSource, string sEventDateTime, string sCardID, int iSysID, int iLocID, int iDeviceID, int iEvntCode, string sLocationID, string sErrorStr, object userState) {
            if ((this.AddEventByEmpIDOperationCompleted == null)) {
                this.AddEventByEmpIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddEventByEmpIDOperationCompleted);
            }
            this.InvokeAsync("AddEventByEmpID", new object[] {
                        sDataSource,
                        sEventDateTime,
                        sCardID,
                        iSysID,
                        iLocID,
                        iDeviceID,
                        iEvntCode,
                        sLocationID,
                        sErrorStr}, this.AddEventByEmpIDOperationCompleted, userState);
        }
        
        private void OnAddEventByEmpIDOperationCompleted(object arg) {
            if ((this.AddEventByEmpIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddEventByEmpIDCompleted(this, new AddEventByEmpIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tracksoftware.net/GetReaderIDByDescription", RequestNamespace="http://tracksoftware.net/", ResponseNamespace="http://tracksoftware.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetReaderIDByDescription(string sDataSource, int iSysId, int iLocation, string sReaderDesc, ref int iReaderId, ref string sErrorStr) {
            object[] results = this.Invoke("GetReaderIDByDescription", new object[] {
                        sDataSource,
                        iSysId,
                        iLocation,
                        sReaderDesc,
                        iReaderId,
                        sErrorStr});
            iReaderId = ((int)(results[1]));
            sErrorStr = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetReaderIDByDescriptionAsync(string sDataSource, int iSysId, int iLocation, string sReaderDesc, int iReaderId, string sErrorStr) {
            this.GetReaderIDByDescriptionAsync(sDataSource, iSysId, iLocation, sReaderDesc, iReaderId, sErrorStr, null);
        }
        
        /// <remarks/>
        public void GetReaderIDByDescriptionAsync(string sDataSource, int iSysId, int iLocation, string sReaderDesc, int iReaderId, string sErrorStr, object userState) {
            if ((this.GetReaderIDByDescriptionOperationCompleted == null)) {
                this.GetReaderIDByDescriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReaderIDByDescriptionOperationCompleted);
            }
            this.InvokeAsync("GetReaderIDByDescription", new object[] {
                        sDataSource,
                        iSysId,
                        iLocation,
                        sReaderDesc,
                        iReaderId,
                        sErrorStr}, this.GetReaderIDByDescriptionOperationCompleted, userState);
        }
        
        private void OnGetReaderIDByDescriptionOperationCompleted(object arg) {
            if ((this.GetReaderIDByDescriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReaderIDByDescriptionCompleted(this, new GetReaderIDByDescriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddPersonCompletedEventHandler(object sender, AddPersonCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddPersonCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddPersonCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sErrorStr {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddPersonByEmpIDCompletedEventHandler(object sender, AddPersonByEmpIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddPersonByEmpIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddPersonByEmpIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sErrorStr {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddCompanyCompletedEventHandler(object sender, AddCompanyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddCompanyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddCompanyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sErrorStr {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetInOutIndicatorCompletedEventHandler(object sender, GetInOutIndicatorCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInOutIndicatorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInOutIndicatorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int iRetVal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sErrorStr {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddEventByExtEmpRefSimpleCompletedEventHandler(object sender, AddEventByExtEmpRefSimpleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddEventByExtEmpRefSimpleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddEventByExtEmpRefSimpleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sErrorStr {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddEventByExtEmpRefByLocationCompletedEventHandler(object sender, AddEventByExtEmpRefByLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddEventByExtEmpRefByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddEventByExtEmpRefByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sErrorStr {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddEventByExtEmpRefCompletedEventHandler(object sender, AddEventByExtEmpRefCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddEventByExtEmpRefCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddEventByExtEmpRefCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sErrorStr {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddEventByExtEmpRef2CompletedEventHandler(object sender, AddEventByExtEmpRef2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddEventByExtEmpRef2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddEventByExtEmpRef2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sErrorStr {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetCompanyCodeCompletedEventHandler(object sender, GetCompanyCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCompanyCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCompanyCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sCompanyCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sErrorStr {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetTrackEmployeeCompletedEventHandler(object sender, GetTrackEmployeeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTrackEmployeeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTrackEmployeeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public System.Data.DataSet dsTrackPerson {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sErrorStr {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetEmployeeIDCompletedEventHandler(object sender, GetEmployeeIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEmployeeIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEmployeeIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sEmpID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sErrorStr {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddReaderDeviceCompletedEventHandler(object sender, AddReaderDeviceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddReaderDeviceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddReaderDeviceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sErrorStr {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddReaderDeviceByDescriptionCompletedEventHandler(object sender, AddReaderDeviceByDescriptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddReaderDeviceByDescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddReaderDeviceByDescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sErrorStr {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddAccessExpirationReasonCompletedEventHandler(object sender, AddAccessExpirationReasonCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddAccessExpirationReasonCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddAccessExpirationReasonCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sErrorStr {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddOrUpdateDeviceControlUnitsCompletedEventHandler(object sender, AddOrUpdateDeviceControlUnitsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddOrUpdateDeviceControlUnitsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddOrUpdateDeviceControlUnitsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sErrorStr {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddEventCompletedEventHandler(object sender, AddEventCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddEventCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddEventCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sErrorStr {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddEventByEmpIDCompletedEventHandler(object sender, AddEventByEmpIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddEventByEmpIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddEventByEmpIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sErrorStr {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetReaderIDByDescriptionCompletedEventHandler(object sender, GetReaderIDByDescriptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReaderIDByDescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReaderIDByDescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int iReaderId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sErrorStr {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
}

#pragma warning restore 1591