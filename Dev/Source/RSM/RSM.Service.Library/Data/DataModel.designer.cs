#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18034
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RSM.Service.Library.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="RSM")]
	public partial class DataModelDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
	#region Extensibility Method Definitions
	partial void OnCreated();
	partial void InsertLocation(Location instance);
	partial void UpdateLocation(Location instance);
	partial void DeleteLocation(Location instance);
	partial void InsertExternalSystem(ExternalSystem instance);
	partial void UpdateExternalSystem(ExternalSystem instance);
	partial void DeleteExternalSystem(ExternalSystem instance);
	partial void InsertPortal(Portal instance);
	partial void UpdatePortal(Portal instance);
	partial void DeletePortal(Portal instance);
	partial void InsertReader(Reader instance);
	partial void UpdateReader(Reader instance);
	partial void DeleteReader(Reader instance);
	partial void InsertAccessHistory(AccessHistory instance);
	partial void UpdateAccessHistory(AccessHistory instance);
	partial void DeleteAccessHistory(AccessHistory instance);
	partial void InsertExternalApplicationKey(ExternalApplicationKey instance);
	partial void UpdateExternalApplicationKey(ExternalApplicationKey instance);
	partial void DeleteExternalApplicationKey(ExternalApplicationKey instance);
	#endregion
		
		public DataModelDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataModelDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataModelDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataModelDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Location> Locations
		{
			get
			{
				return this.GetTable<Location>();
			}
		}
		
		public System.Data.Linq.Table<ExternalSystem> ExternalSystems
		{
			get
			{
				return this.GetTable<ExternalSystem>();
			}
		}
		
		public System.Data.Linq.Table<Portal> Portals
		{
			get
			{
				return this.GetTable<Portal>();
			}
		}
		
		public System.Data.Linq.Table<Reader> Readers
		{
			get
			{
				return this.GetTable<Reader>();
			}
		}
		
		public System.Data.Linq.Table<AccessHistory> AccessHistories
		{
			get
			{
				return this.GetTable<AccessHistory>();
			}
		}
		
		public System.Data.Linq.Table<ExternalApplicationKey> ExternalApplicationKeys
		{
			get
			{
				return this.GetTable<ExternalApplicationKey>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Locations")]
	public partial class Location : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LocationID;
		
		private string _LocationName;
		
		private System.DateTime _DateAdded;
		
		private EntitySet<Portal> _Portals;
		
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnLocationIDChanging(int value);
	partial void OnLocationIDChanged();
	partial void OnLocationNameChanging(string value);
	partial void OnLocationNameChanged();
	partial void OnDateAddedChanging(System.DateTime value);
	partial void OnDateAddedChanged();
	#endregion
		
		public Location()
		{
			this._Portals = new EntitySet<Portal>(new Action<Portal>(this.attach_Portals), new Action<Portal>(this.detach_Portals));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged("LocationID");
					this.OnLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LocationName
		{
			get
			{
				return this._LocationName;
			}
			set
			{
				if ((this._LocationName != value))
				{
					this.OnLocationNameChanging(value);
					this.SendPropertyChanging();
					this._LocationName = value;
					this.SendPropertyChanged("LocationName");
					this.OnLocationNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="Date NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_Portal", Storage="_Portals", ThisKey="LocationID", OtherKey="LocationId")]
		public EntitySet<Portal> Portals
		{
			get
			{
				return this._Portals;
			}
			set
			{
				this._Portals.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Portals(Portal entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		
		private void detach_Portals(Portal entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExternalSystem")]
	public partial class ExternalSystem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private bool _Incoming;
		
		private bool _Outgoing;
		
		private EntitySet<ExternalApplicationKey> _ExternalApplicationKeys;
		
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(int value);
	partial void OnIdChanged();
	partial void OnNameChanging(string value);
	partial void OnNameChanged();
	partial void OnIncomingChanging(bool value);
	partial void OnIncomingChanged();
	partial void OnOutgoingChanging(bool value);
	partial void OnOutgoingChanged();
	#endregion
		
		public ExternalSystem()
		{
			this._ExternalApplicationKeys = new EntitySet<ExternalApplicationKey>(new Action<ExternalApplicationKey>(this.attach_ExternalApplicationKeys), new Action<ExternalApplicationKey>(this.detach_ExternalApplicationKeys));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Incoming", DbType="Bit NOT NULL")]
		public bool Incoming
		{
			get
			{
				return this._Incoming;
			}
			set
			{
				if ((this._Incoming != value))
				{
					this.OnIncomingChanging(value);
					this.SendPropertyChanging();
					this._Incoming = value;
					this.SendPropertyChanged("Incoming");
					this.OnIncomingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Outgoing", DbType="Bit NOT NULL")]
		public bool Outgoing
		{
			get
			{
				return this._Outgoing;
			}
			set
			{
				if ((this._Outgoing != value))
				{
					this.OnOutgoingChanging(value);
					this.SendPropertyChanging();
					this._Outgoing = value;
					this.SendPropertyChanged("Outgoing");
					this.OnOutgoingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExternalSystem_ExternalApplicationKey", Storage="_ExternalApplicationKeys", ThisKey="Id", OtherKey="ExternalSystemId")]
		public EntitySet<ExternalApplicationKey> ExternalApplicationKeys
		{
			get
			{
				return this._ExternalApplicationKeys;
			}
			set
			{
				this._ExternalApplicationKeys.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExternalApplicationKeys(ExternalApplicationKey entity)
		{
			this.SendPropertyChanging();
			entity.ExternalSystem = this;
		}
		
		private void detach_ExternalApplicationKeys(ExternalApplicationKey entity)
		{
			this.SendPropertyChanging();
			entity.ExternalSystem = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Portal")]
	public partial class Portal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private System.DateTime _Added;
		
		private int _LocationId;
		
		private EntitySet<Reader> _Readers;
		
		private EntitySet<AccessHistory> _AccessHistories;
		
		private EntityRef<Location> _Location;
		
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(int value);
	partial void OnIdChanged();
	partial void OnNameChanging(string value);
	partial void OnNameChanged();
	partial void OnAddedChanging(System.DateTime value);
	partial void OnAddedChanged();
	partial void OnLocationIdChanging(int value);
	partial void OnLocationIdChanged();
	#endregion
		
		public Portal()
		{
			this._Readers = new EntitySet<Reader>(new Action<Reader>(this.attach_Readers), new Action<Reader>(this.detach_Readers));
			this._AccessHistories = new EntitySet<AccessHistory>(new Action<AccessHistory>(this.attach_AccessHistories), new Action<AccessHistory>(this.detach_AccessHistories));
			this._Location = default(EntityRef<Location>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Added", DbType="DateTime NOT NULL")]
		public System.DateTime Added
		{
			get
			{
				return this._Added;
			}
			set
			{
				if ((this._Added != value))
				{
					this.OnAddedChanging(value);
					this.SendPropertyChanging();
					this._Added = value;
					this.SendPropertyChanged("Added");
					this.OnAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationId", DbType="Int NOT NULL")]
		public int LocationId
		{
			get
			{
				return this._LocationId;
			}
			set
			{
				if ((this._LocationId != value))
				{
					if (this._Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationIdChanging(value);
					this.SendPropertyChanging();
					this._LocationId = value;
					this.SendPropertyChanged("LocationId");
					this.OnLocationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Portal_Reader", Storage="_Readers", ThisKey="Id", OtherKey="PortalId")]
		public EntitySet<Reader> Readers
		{
			get
			{
				return this._Readers;
			}
			set
			{
				this._Readers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Portal_AccessHistory", Storage="_AccessHistories", ThisKey="Id", OtherKey="PortalId")]
		public EntitySet<AccessHistory> AccessHistories
		{
			get
			{
				return this._AccessHistories;
			}
			set
			{
				this._AccessHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_Portal", Storage="_Location", ThisKey="LocationId", OtherKey="LocationID", IsForeignKey=true)]
		public Location Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				Location previousValue = this._Location.Entity;
				if (((previousValue != value) 
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.Portals.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.Portals.Add(this);
						this._LocationId = value.LocationID;
					}
					else
					{
						this._LocationId = default(int);
					}
					this.SendPropertyChanged("Location");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Readers(Reader entity)
		{
			this.SendPropertyChanging();
			entity.Portal = this;
		}
		
		private void detach_Readers(Reader entity)
		{
			this.SendPropertyChanging();
			entity.Portal = null;
		}
		
		private void attach_AccessHistories(AccessHistory entity)
		{
			this.SendPropertyChanging();
			entity.Portal = this;
		}
		
		private void detach_AccessHistories(AccessHistory entity)
		{
			this.SendPropertyChanging();
			entity.Portal = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Reader")]
	public partial class Reader : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _PortalId;
		
		private System.DateTime _Added;
		
		private EntitySet<AccessHistory> _AccessHistories;
		
		private EntityRef<Portal> _Portal;
		
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(int value);
	partial void OnIdChanged();
	partial void OnNameChanging(string value);
	partial void OnNameChanged();
	partial void OnPortalIdChanging(int value);
	partial void OnPortalIdChanged();
	partial void OnAddedChanging(System.DateTime value);
	partial void OnAddedChanged();
	#endregion
		
		public Reader()
		{
			this._AccessHistories = new EntitySet<AccessHistory>(new Action<AccessHistory>(this.attach_AccessHistories), new Action<AccessHistory>(this.detach_AccessHistories));
			this._Portal = default(EntityRef<Portal>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PortalId", DbType="Int NOT NULL")]
		public int PortalId
		{
			get
			{
				return this._PortalId;
			}
			set
			{
				if ((this._PortalId != value))
				{
					if (this._Portal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPortalIdChanging(value);
					this.SendPropertyChanging();
					this._PortalId = value;
					this.SendPropertyChanged("PortalId");
					this.OnPortalIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Added", DbType="DateTime NOT NULL")]
		public System.DateTime Added
		{
			get
			{
				return this._Added;
			}
			set
			{
				if ((this._Added != value))
				{
					this.OnAddedChanging(value);
					this.SendPropertyChanging();
					this._Added = value;
					this.SendPropertyChanged("Added");
					this.OnAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Reader_AccessHistory", Storage="_AccessHistories", ThisKey="Id", OtherKey="ReaderId")]
		public EntitySet<AccessHistory> AccessHistories
		{
			get
			{
				return this._AccessHistories;
			}
			set
			{
				this._AccessHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Portal_Reader", Storage="_Portal", ThisKey="PortalId", OtherKey="Id", IsForeignKey=true)]
		public Portal Portal
		{
			get
			{
				return this._Portal.Entity;
			}
			set
			{
				Portal previousValue = this._Portal.Entity;
				if (((previousValue != value) 
							|| (this._Portal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Portal.Entity = null;
						previousValue.Readers.Remove(this);
					}
					this._Portal.Entity = value;
					if ((value != null))
					{
						value.Readers.Add(this);
						this._PortalId = value.Id;
					}
					else
					{
						this._PortalId = default(int);
					}
					this.SendPropertyChanged("Portal");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AccessHistories(AccessHistory entity)
		{
			this.SendPropertyChanging();
			entity.Reader = this;
		}
		
		private void detach_AccessHistories(AccessHistory entity)
		{
			this.SendPropertyChanging();
			entity.Reader = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccessHistory")]
	public partial class AccessHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _Accessed;
		
		private int _PersonId;
		
		private int _PortalId;
		
		private int _ReaderId;
		
		private int _Type;
		
		private System.Nullable<int> _Reason;
		
		private EntityRef<Portal> _Portal;
		
		private EntityRef<Reader> _Reader;
		
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(int value);
	partial void OnIdChanged();
	partial void OnAccessedChanging(System.DateTime value);
	partial void OnAccessedChanged();
	partial void OnPersonIdChanging(int value);
	partial void OnPersonIdChanged();
	partial void OnPortalIdChanging(int value);
	partial void OnPortalIdChanged();
	partial void OnReaderIdChanging(int value);
	partial void OnReaderIdChanged();
	partial void OnTypeChanging(int value);
	partial void OnTypeChanged();
	partial void OnReasonChanging(System.Nullable<int> value);
	partial void OnReasonChanged();
	#endregion
		
		public AccessHistory()
		{
			this._Portal = default(EntityRef<Portal>);
			this._Reader = default(EntityRef<Reader>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Accessed", DbType="DateTime NOT NULL")]
		public System.DateTime Accessed
		{
			get
			{
				return this._Accessed;
			}
			set
			{
				if ((this._Accessed != value))
				{
					this.OnAccessedChanging(value);
					this.SendPropertyChanging();
					this._Accessed = value;
					this.SendPropertyChanged("Accessed");
					this.OnAccessedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonId", DbType="Int NOT NULL")]
		public int PersonId
		{
			get
			{
				return this._PersonId;
			}
			set
			{
				if ((this._PersonId != value))
				{
					this.OnPersonIdChanging(value);
					this.SendPropertyChanging();
					this._PersonId = value;
					this.SendPropertyChanged("PersonId");
					this.OnPersonIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PortalId", DbType="Int NOT NULL")]
		public int PortalId
		{
			get
			{
				return this._PortalId;
			}
			set
			{
				if ((this._PortalId != value))
				{
					if (this._Portal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPortalIdChanging(value);
					this.SendPropertyChanging();
					this._PortalId = value;
					this.SendPropertyChanged("PortalId");
					this.OnPortalIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReaderId", DbType="Int NOT NULL")]
		public int ReaderId
		{
			get
			{
				return this._ReaderId;
			}
			set
			{
				if ((this._ReaderId != value))
				{
					if (this._Reader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReaderIdChanging(value);
					this.SendPropertyChanging();
					this._ReaderId = value;
					this.SendPropertyChanged("ReaderId");
					this.OnReaderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reason", DbType="Int")]
		public System.Nullable<int> Reason
		{
			get
			{
				return this._Reason;
			}
			set
			{
				if ((this._Reason != value))
				{
					this.OnReasonChanging(value);
					this.SendPropertyChanging();
					this._Reason = value;
					this.SendPropertyChanged("Reason");
					this.OnReasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Portal_AccessHistory", Storage="_Portal", ThisKey="PortalId", OtherKey="Id", IsForeignKey=true)]
		public Portal Portal
		{
			get
			{
				return this._Portal.Entity;
			}
			set
			{
				Portal previousValue = this._Portal.Entity;
				if (((previousValue != value) 
							|| (this._Portal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Portal.Entity = null;
						previousValue.AccessHistories.Remove(this);
					}
					this._Portal.Entity = value;
					if ((value != null))
					{
						value.AccessHistories.Add(this);
						this._PortalId = value.Id;
					}
					else
					{
						this._PortalId = default(int);
					}
					this.SendPropertyChanged("Portal");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Reader_AccessHistory", Storage="_Reader", ThisKey="ReaderId", OtherKey="Id", IsForeignKey=true)]
		public Reader Reader
		{
			get
			{
				return this._Reader.Entity;
			}
			set
			{
				Reader previousValue = this._Reader.Entity;
				if (((previousValue != value) 
							|| (this._Reader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Reader.Entity = null;
						previousValue.AccessHistories.Remove(this);
					}
					this._Reader.Entity = value;
					if ((value != null))
					{
						value.AccessHistories.Add(this);
						this._ReaderId = value.Id;
					}
					else
					{
						this._ReaderId = default(int);
					}
					this.SendPropertyChanged("Reader");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExternalApplicationKey")]
	public partial class ExternalApplicationKey : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _EntityType;
		
		private int _ExternalSystemId;
		
		private string _ExternalId;
		
		private int _InternalId;
		
		private EntityRef<ExternalSystem> _ExternalSystem;
		
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnEntityTypeChanging(string value);
	partial void OnEntityTypeChanged();
	partial void OnExternalSystemIdChanging(int value);
	partial void OnExternalSystemIdChanged();
	partial void OnExternalIdChanging(string value);
	partial void OnExternalIdChanged();
	partial void OnInternalIdChanging(int value);
	partial void OnInternalIdChanged();
	#endregion
		
		public ExternalApplicationKey()
		{
			this._ExternalSystem = default(EntityRef<ExternalSystem>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityType", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string EntityType
		{
			get
			{
				return this._EntityType;
			}
			set
			{
				if ((this._EntityType != value))
				{
					this.OnEntityTypeChanging(value);
					this.SendPropertyChanging();
					this._EntityType = value;
					this.SendPropertyChanged("EntityType");
					this.OnEntityTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExternalSystemId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ExternalSystemId
		{
			get
			{
				return this._ExternalSystemId;
			}
			set
			{
				if ((this._ExternalSystemId != value))
				{
					if (this._ExternalSystem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExternalSystemIdChanging(value);
					this.SendPropertyChanging();
					this._ExternalSystemId = value;
					this.SendPropertyChanged("ExternalSystemId");
					this.OnExternalSystemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExternalId", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ExternalId
		{
			get
			{
				return this._ExternalId;
			}
			set
			{
				if ((this._ExternalId != value))
				{
					this.OnExternalIdChanging(value);
					this.SendPropertyChanging();
					this._ExternalId = value;
					this.SendPropertyChanged("ExternalId");
					this.OnExternalIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InternalId", DbType="Int NOT NULL")]
		public int InternalId
		{
			get
			{
				return this._InternalId;
			}
			set
			{
				if ((this._InternalId != value))
				{
					this.OnInternalIdChanging(value);
					this.SendPropertyChanging();
					this._InternalId = value;
					this.SendPropertyChanged("InternalId");
					this.OnInternalIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExternalSystem_ExternalApplicationKey", Storage="_ExternalSystem", ThisKey="ExternalSystemId", OtherKey="Id", IsForeignKey=true)]
		public ExternalSystem ExternalSystem
		{
			get
			{
				return this._ExternalSystem.Entity;
			}
			set
			{
				ExternalSystem previousValue = this._ExternalSystem.Entity;
				if (((previousValue != value) 
							|| (this._ExternalSystem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ExternalSystem.Entity = null;
						previousValue.ExternalApplicationKeys.Remove(this);
					}
					this._ExternalSystem.Entity = value;
					if ((value != null))
					{
						value.ExternalApplicationKeys.Add(this);
						this._ExternalSystemId = value.Id;
					}
					else
					{
						this._ExternalSystemId = default(int);
					}
					this.SendPropertyChanged("ExternalSystem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
